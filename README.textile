**Inspec** is a **Javascript BDD** Test Library that aims to be **flexible** and **powerful** yet **clean** and **easy to extend**. The source is currently working, but is still considered to be in experimental stage. 

h2. Highlights

* Framework independent
* Nested Example Groups
* Shared Example Groups (A.K.A. it_should_behave_like in RSpec )
* Sandboxed Example Scope
* Cascading beforeEach, beforeAll, afterEach, afterAll
* Clean API
* Easy to extend
* Works with Browser, Rhino, WScript
* Tested with IE 7, FireFox 3, Chrome, Safari 3 (need to test on IE 6, 8, FireFox 2, Safari 4, Opera 9)


h2. Eample

<pre><code>
describe("Inspec", function(){
  it("should work", function(){
    expect(true).to(beTrue);
  })
    
  it("should fail", function(){
    expect(true).toNot(beTrue);
  })

  it("should error", function(){
    it.should.error.out;
  })
  
  it("should be pending")
    
  describe("with a nested example group", function(){
    it("should work as a nested example group", function(){
      expect(true).to(beTrue);
    })
  })

  
  itShouldBehaveLike("a shared example group")
})

sharedExamplesFor("a shared example group", function(){
  it("should work as shared example", function(){
    expect(true).to(beTrue);
  })
  
  describe("with nested example groups in shared", function(){
    it("should work as a nested example group in shared", function(){
      expect(true).to(beTrue);
    })
  })
  
})
</code></pre>

h2. What's Working

* Basic Matchers (stolen from Screw.Unit, and modified a bit...)
* Nested Example Groups
* Shared Example Groups ( A.K.A. it_should_behave_like in RSpec )
* Sandboxed Example Scope (correctly nested)
* Basic HTML Reporter
* Tested to work with IE 7, FireFox 3, Chrome, Safari 3 (need to test on IE 6, 8, FireFox 2, Safari 4, Opera 9)
* Works with Browser, Rhino, WScript

h2. What needs to be done

* Make sure compatibility with all major browsers
* Allow selective execution of Example groups / Examples
* Make a better HTML Reporter, that hooks into selective executions
* Better Documentations
* Better Error messages on Failure and Exception


h2. What I'm considering to do

* Add Parsers to parse loaded specs before eval (support for better syntax, aka jSpec)

I'm not too sure if I should do that. Making the specs look cleaner, but turning JavaScript tests into some kind of Frankenstein Script...
