h1. Inspec: A JavaScript BDD Test Framework

**Inspec** is a **Javascript BDD** Test Library that aims to be **flexible** and **powerful** yet **clean** and **easy to extend**. Packaged as a "Narwhal":http://github.com/tlrobinson/narwhal/tree/master Package.

h2. Dependencies

You need:

"Narwhal":http://github.com/tlrobinson/narwhal/tree/master

h2. Installation

h3. Setup your path for narwhal

  cd ~
  mkdir ~/.bin
  nano ~/.bash_profile
  source ~/.bash_profile

h3. Get narwhal

# cd ~ && mkdir serverjs
# cd ~/serverjs
# git clone git://github.com/tlrobinson/narwhal.git

h3. Get Inspec

# cd ~/serverjs/narwal/packages
# git clone git@github.com:aq1018/inspec.git

h3. Link narwhal and Inspec executables to your bin folder

# cd ~/.bin
# ln -s ~/serverjs/narwhal/bin/* .
# ln -s ~/serverjs/narwhal/packages/inspec/bin/* .

h3. Run Inspec self test

# cd ~/serverjs/narwhal/packages/inspec
# inspec

h3. Specing your own

# Make a directory called 'spec'
# Your spec files should be in spec folder and/or its subfolders
# Inspec looks for files with name ending with 'Spec.js'. E.g. 'fooSpec.js', 'barSpec.js'
# type 'inspec' on the parent directory of 'spec' to see test results

h2. Highlights

* Nested Example Groups
* Shared Example Groups (A.K.A. it_should_behave_like in RSpec )
* support multiple definition of before / after blocks (add array)
* support multiple definition of same behaviors (see below)
* Sandboxed Example Scope
* Cascading beforeEach, beforeAll, afterEach, afterAll
* Clean API
* Easy to extend

h2. Sample spec

Highly suggest you to look at the spec directory for more sample code on specing

<pre><code>
sharedExamplesFor("a shared example group", function(){
  it("should work as shared example", function(){
    expect(true).to(beTrue);
  })

  describe("with nested example groups in shared", function(){
    it("should work as a nested example group in shared", function(){
      expect(true).to(beTrue);
    })
  })

})

describe("Inspec", function(){
  it("should work", function(){
    expect(true).to(beTrue);
  })
    
  it("should fail", function(){
    expect(true).toNot(beTrue);
  })

  it("should error", function(){
    it.should.error.out;
  })
  
  it("should be pending")
    
  describe("with a nested example group", function(){
    it("should work as a nested example group", function(){
      expect(true).to(beTrue);
    })
  })

  itShouldBehaveLike("a shared example group")
})
</code></pre>